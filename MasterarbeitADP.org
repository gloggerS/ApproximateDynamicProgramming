#+TAGS: github pdf book Treffen
#+STARTUP: entitiespretty

* 26.03. Treffen mit Sebastian
** Implementierung
*** vektorisierte Implementierung nicht möglich wegen variablem Offerset
Idee: Am schnellsten ist vektorisierte Implementierung. Weiß über alle Perioden, welche Kunden kommen und welche Präferenzen diese haben. Dann mit Zufallszahl über alle Perioden die verkauften Produkte erfassen mit ihrem Revenue. Und zum Schluss Kapazitäten anpassen, ob noch was vorhanden (Daten kappen). 
Klappt nicht: Offerset ändert sich je nach verfügbarer Kapazität.

* Overall
** https://vhbonline.org/vhb4you/jourqual/vhb-jourqual-archiv/jq1/teilranking-logistik-operations-research-produktion/
** Goals
*** Get insights into research in OR
*** Explore chair of Prof. Klein (do I want to do a PhD there)
*** Implement a problem in Python
*** Aim for a paper (ultimate goal)


* Persönliches
Bin ein fleißiger Arbeiter, aber es werden wohl Phasen kommen, in denen es schleppender vorangeht. Ich glaube, ich ertappe mich dann wieder dabei, zu denken, dass Bichler und Auktionen auch ein schönes Thema gewesen wäre. Aber das ist vergangen! Ich bin jetzt hier bei Klein!
Werte, die mir wichtig sind:  Pflichtbewusstsein, Disziplin, Bescheidenheit, 


* Literature
** https://github.com/tristanguigue/dynamic-programming		     :github:
** https://github.com/edouardberthe/ADPPortfolioSelection	     :github:
** https://prezi.com/vy11aa1lt8cp/an-approximate-dynamic-programming-algorithm-for-large-scale-fleet-management-a-case-application/ 
** Dynamic programming and optimal control			       :book:
*** 0002/MAT 917f 2005 A 10033-2(3)
*** 0005/MAT 917f 2005 A 10033-2
*** 0102/MAT 917f 2001 A 9434 
** Approximate dynamic programming: solving the curses of dimensionality :book:
*** 0002/MAT 917f 2009 A 36(2) 

* Structure of work
** Literature research
** Methods research
** Find idea
** Work on idea
** Implement idea
** Write down idea
** Execute implementation
** Write down results

* 05.03.  Treffen mit Prof. Klein				    :Treffen:
  SCHEDULED: <2019-03-05 Di>
** Erwartungen abstecken
bisher noch sehr freies Thema
tue mir schwer zu unterscheiden zwischen Paper und Masterarbeit (IR-Phase bei Okhrin: sind gerade in Veröffentlichugnsprozess)
möchte den Lehrstuhl kennenlernen (dafür war Mittagessen schon gute Gelegenheit; Tutorien wsl. schon alle geplant (aber könnte mir gut vorstellen, am Lehrstuhl zu unterstützen)
*** Was ich lernen möchte
Literaturarbeit
(Themenfindung)
Persönliches Projektmanagement
Projekt in Python implementieren (Zusammenspiel Python und Gurobi (?), Simulationsstudie)
Lehrstuhl und dessen Aufgaben kennenlernen 
** Zeitplan besprechen
Excel Dokument durchgehen
Was finden Sie überraschend?
Wo gibts Engstellen / wo sollte mehr Zeit für eingeplant werden?
** Thema eingrenzen
Themenbereiche, die mich interessieren: *Optimierung*, Statistik, Finanzen
Themen/Problemstellungen, die im Paper "Approximate Dynamic Programming for Planning a Ride-Sharing System using Autonomous Fleets of Electric Vehicles" angesprochen sind: *dispatch problem*, surge pricing problem, fleet size problem, *simulator*
Schnittstellen zu Share-a-Ride (Lukas Janinhoff)
** Arbeitsweise 
*** abzusprechen 
Ansprechpartner am Lehrstuhl (Betreuer): Sebastian Koch
Sprache der Abschlussarbeit: englisch (vor Hintergrund Paper)
Arbeit in LaTeX: würde ich gerne machen, habe ich schon angefangen
Seitenumfang: gibt es Vorgaben?
Anmeldung bei FIM: übernehme ich
Zwischenpräsentation und Abschlusspräsentation während  Masterandenseminar: mit Betreuer abstimmen
Statusupdates (wie für Prof Zagst in Forschungsphase) am Ende des Monats?
*** persönlich
Tagebuch: Mittels Github Erfolge loggen und Commit Messages hernehmen, um Arbeit nachzuvollziehen
Bin auch eingeschrieben zu Informatik-Studium, primär aus Interesse; Fokus auf Masterarbeit
** Gedanken
Powell scheint mir gerade den Bereich zu dominieren (was ich bisschen bedenklich finde, da einseitig)
gibt es Benchmark-Modelle, die man schlagen kann (wobei das schlichte Optimierung wäre; etwas neues zu finden wäre noch spannender; aber ist das noch im Rahmen einer Masterarbeit?)
arxiv Sachen sind ja noch nicht wirklich veröffentlicht. Wie wird das im Bereich OR gesehen, kann man sich darauf berufen/zitieren?
** Notizen
Erst gemeinsam zum Essen beim Griechen  gefahren (Klein fährt weißen M3 BMW). Und auch so breit gesprochen über Lehre an Uni (Ordinarius vs Professor, Lehre an Uni, Suche / Angebot nach Tutorenjob erwähnt, evtl. Erstellung Übungsaufgaben, für Promotion dann auch eigene Vorlesung gestalten, möglicherweise zu Künstlicher Intelligenz). Lehrstuhl ist geldtechnisch gut ausgestattet, sodass er auch mal mit Graphikkarten rechnen würde.
David Fleckenstein hat die Arbeit schonmal geschrieben, bzw ein Seminar dazu. Drei Paper anschauen und implementieren. 
Ggf. Projekt mit Flixbus machbar.
Ziel: Methoden und Modelle kennenlernen


* 07.03. Treffen mit Sebastian Koch				    :Treffen:
  SCHEDULED: <2019-03-07 Do>
** Erwartungen abstecken
*** Meinerseits
Ich möchte die Methoden und Modelle zur Lösung von Customer Choice Problemen verstehen und anwenden
Ich möchte den Lehrstuhl kennenlernen
Ich möchte eine gute Masterarbeit schreiben
tue mir schwer zu unterscheiden zwischen Paper und Masterarbeit (IR-Phase bei Okhrin: sind gerade in Veröffentlichugnsprozess)
*** Was ich lernen möchte
(Themenfindung)
Literaturarbeit
Persönliches Projektmanagement
Projekt in Python implementieren (Zusammenspiel Python und Gurobi (?), Simulationsstudie), IDE dafür?
*** Sebastian Koch

** Thema 
*** Erstellung von mehreren Beispieldatensätzen gemäß Koch (2017)
Customer Stream gemäß den Spezifikationen meint, erstelle pro Customer Stream eine Sample Pfad über den Zeitraum T, in welcher in jeder Zeiteinheit max. ein Kunde von einem bestimmten Segment erscheint und dieser auch schon ein bestimmtes Produkt mit einer bestimmten Wkeit nachfrägt. Sollte dann in diesem Zeitraum unsere Politik (Welche Elemente wir im Offer-Set anbieten) das gewünschte Produkt anbieten, so erhält der Kunde das Produkt, bezahlt dafür und die Kapazität verringert sich.
| Parameter              | Single-leg flight     | PF | HS1 | HS2 | HS3 | HS4 |
|------------------------+-----------------------+----+-----+-----+-----+-----|
| *same*                 |                       |    |     |     |     |     |
|------------------------+-----------------------+----+-----+-----+-----+-----|
| num products           | 4                     |    |     |     |     |     |
| revenue r              | (1000, 800, 600, 400) |    |     |     |     |     |
| periods T              | 400                   |    |     |     |     |     |
| num customer seg       | 1                     |    |     |     |     |     |
| arrival prob \lambda         | 0.5                   |    |     |     |     |     |
| preference weights u   | (0.4, 0.8, 1.2, 1.6)  |    |     |     |     |     |
|------------------------+-----------------------+----+-----+-----+-----+-----|
| *differing*            |                       |    |     |     |     |     |
|------------------------+-----------------------+----+-----+-----+-----+-----|
| no-purchase preference | {1,2,3}               |    |     |     |     |     |
| capacitiy              | {40, 60, ..., 120}    |    |     |     |     |     |
*** Implementierung von ausgewählten Modellen in den Papern Talluri and van Ryzin, Liu and van Ryzin, Bront and Mendez-Diaz
**** Verwendete Modelle
| Paper                      | Methode                                      | Kommentar                            |
|----------------------------+----------------------------------------------+--------------------------------------|
| Talluri, van Ryzin         | ESMR-b with Buy-up                           |                                      |
|                            | choice based DP with Efficient Sets          |                                      |
|----------------------------+----------------------------------------------+--------------------------------------|
| Liu, van Ryzin             | Column Generation                            |                                      |
|                            | Decomposition Approximation                  | nur für network                      |
|                            | DP decomposition based on independent demand |                                      |
|                            | static CDLP solution                         |                                      |
|                            | choice-based decomposition heuristic         |                                      |
|----------------------------+----------------------------------------------+--------------------------------------|
| Miranda Bront, Mendez-Diaz | offline: Assessing Value of Capacity         | Erweiterung für overlapping segments |
|                            | online: Compute Offer Sets Dynamically       |                                      |
|                            | DCOMP                                        |                                      |
|                            | DCOMP-0.5                                    |                                      |
|                            | CDLP                                         |                                      |
|                            | RCDLP                                        |                                      |
|                            | ROPT-freq                                    |                                      |
**** Underlying Models for Customer Behavior: 
***** Independent Demand Model
***** Multinomial Logit Choice Model
***** Lowest Open Fare Model
*** Zusammenschreiben der Ergebnisse
** Zeitplan besprechen
*** allgemein
Excel Dokument durchgehen
Was finden Sie überraschend?
Wo gibts Engstellen / wo sollte mehr Zeit für eingeplant werden?

Termine allgemein: nicht am Freitag?
in nächster Zeit: grob alle 2 Wochen: nächster optimalerweise am Fr, 22.3.
*** bis zum nächsten Treffen
**** TODO Python Skills auffrischen mit Tutorial python-kurs.eu [23/44]
CLOCK: [2019-03-12 Di 09:14]--[2019-03-12 Di 09:14] =>  0:00
CLOCK: [2019-03-11 Mo 20:02]--[2019-03-11 Mo 20:46] =>  0:44
CLOCK: [2019-03-11 Mo 18:44]--[2019-03-11 Mo 18:53] =>  0:09
CLOCK: [2019-03-11 Mo 13:53]--[2019-03-11 Mo 14:39] =>  0:46
CLOCK: [2019-03-11 Mo 09:10]--[2019-03-11 Mo 10:24] =>  1:14
CLOCK: [2019-03-08 Fr 08:45]--[2019-03-08 Fr 09:11] =>  0:26
***** DONE Geschichte von Python
CLOSED: [2019-03-08 Fr 08:32]
***** DONE Interaktiver Modus
CLOSED: [2019-03-08 Fr 08:33]
***** DONE Code ausführen
CLOSED: [2019-03-08 Fr 08:33]
***** DONE Blöcke
CLOSED: [2019-03-08 Fr 08:33]
***** DONE Datentypen und Variablen
CLOSED: [2019-03-08 Fr 08:45]
CLOCK: [2019-03-08 Fr 08:40]--[2019-03-08 Fr 08:45] =>  0:05
:PROPERTIES:
:ORDERED:  t
:END:
***** DONE Operatoren
CLOSED: [2019-03-08 Fr 08:48]
***** DONE Sequentielle Datentypen
***** DONE Listen manipulieren
***** DONE Mengen
***** DONE Flaches und tiefes Kopieren
CLOSED: [2019-03-08 Fr 08:53]
***** DONE Dictionaries
***** DONE Eingabe mit input und raw_input
CLOSED: [2019-03-08 Fr 08:59]
***** DONE Bedingte Anweisungen
CLOSED: [2019-03-08 Fr 08:56]
***** DONE while-Schleife
CLOCK: [2019-03-11 Mo 09:33]--[2019-03-11 Mo 09:33] =>  0:00
***** DONE for-Schleife
***** DONE Ausgabe mit print
***** DONE Formatierte Ausgabe
***** DONE Funktionen
***** DONE Parameter-Übergabe
***** DONE Globale und lokale Variablen
***** DONE Rekursion und Rekursive Funktionen
***** DONE Einführung in Dekorateure
***** DONE Memoisation und Python-Dekorateure
CLOSED: [2019-03-08 Fr 09:07]
***** TODO Daten lesen und schreiben
***** TODO Modularisierung: Module
***** TODO Tests, Doctest und UnitTest
***** TODO Reguläre Ausdrücke
***** TODO Reguläre Ausdrücke, Fortgeschrittene
***** TODO Modularisierung: Pakete
***** TODO Lambda-Operator, map- filter- und reduce-Funktion
***** TODO Listen-Abstraktion (List Comprehension)
***** TODO Generatoren und Iteratoren
***** TODO Ausnahme-Behandlung
***** TODO Einführung in die Objektorientierte Programmierung (OOP))
***** TODO Klassen- und Instanzattribute
***** TODO Properties
***** TODO Vererbung
***** TODO Mehrfachvererbung
***** TODO Magische Methoden und Operator-Überladung
***** TODO Slots
***** TODO Class und type
***** TODO Hin zu Metaklassen
***** TODO Metaklassen
***** TODO Beispiel für Metaklassen
**** TODO Dynamiches Programm dazu mit Zeitvergleich mit und ohne Memoisation 
CLOCK: [2019-03-12 Di 16:00]
CLOCK: [2019-03-12 Di 12:18]--[2019-03-12 Di 12:57] =>  0:39
CLOCK: [2019-03-11 Mo 18:08]--[2019-03-11 Mo 18:44] =>  0:36
CLOCK: [2019-03-11 Mo 14:46]--[2019-03-11 Mo 17:29] =>  2:43
****** TODO Memoisation von customer_ choiche_ segments
****** TODO Memoisation von value_ expected
**** DONE Excel Spielerei für das ganze
CLOSED: [2019-03-12 Di 14:01]
super aufwändig, aber nicht mächtig genug, um Funktionen abzubilden (sehr schnell zu hochdimensional; Excel zum Spielen gut)
**** TODO Bellmannsche Funktionalgleichung anfügen
CLOCK: [2019-03-12 Di 12:18]--[2019-03-12 Di 12:18] =>  0:00
CLOCK: [2019-03-12 Di 12:18]--[2019-03-12 Di 12:18] =>  0:00
**** DONE Paper Talluri und van Ryzin lesen
SCHEDULED: <2019-03-06 Mi>
    
**** TODO Paper Liu und van Ryzin lesen
    SCHEDULED: <2019-03-07 Do>
**** TODO Paper Miranda Bront lesen
    SCHEDULED: <2019-03-07 Do>
**** TODO Paper Talluri und van Ryzin zusammenfassen [0/5]
SCHEDULED: <2019-03-08 Fr>
***** TODO Identifiziertes Problem
***** TODO Schwierigkeiten
***** TODO Vorgehen zur Lösung
***** TODO Resultate
***** TODO Fragen meinerseits
**** TODO Paper Liu und van Ryzin zusammenfassen [0/5]
***** TODO Identifiziertes Problem
***** TODO Schwierigkeiten
***** TODO Vorgehen zur Lösung
***** TODO Resultate
***** TODO Fragen meinerseits
**** TODO Paper Miranda Bront zusammenfassen [0/5]
***** TODO Identifiziertes Problem
***** TODO Schwierigkeiten
***** TODO Vorgehen zur Lösung
***** TODO Resultate
***** TODO Fragen meinerseits
**** TODO Paper Talluri und van Ryzin nachimplementieren [0/5]
***** TODO Effiziente Sets bestimmen graphisch
***** TODO Effiziente Sets bestimmen über Optimierung
***** TODO RM mit effizienten Sets?
***** TODO RM mit EMSR-b with Buy-Up
***** TODO Numerische Vergleiche auf dem Beispieldatensatz (automatisiert)
** Arbeitsweise 
*** abzusprechen 
Ansprechpartner am Lehrstuhl (Betreuer): Sebastian Koch
Sprache der Abschlussarbeit: deutsch (Ticken besseres Sprachgefühl)
Arbeit in LaTeX: sieht für mich am schönsten aus, habe  schon angefangen
Seitenumfang: gibt es Vorgaben? 60
Anmeldung bei FIM: übernehme ich
Zwischenpräsentation und Abschlusspräsentation während Masterandenseminar: mit Prof. Klein abstimmen
Programmiersprache: Python
*** Sebastian Koch
Was ist Ihnen wichtig in der Zusammenarbeit?
*** persönlich
Tagebuch: Mittels Github Erfolge loggen und Commit Messages hernehmen, um Arbeit nachzuvollziehen
Bin auch eingeschrieben zu Informatik-Studium, primär aus Interesse; Fokus auf Masterarbeit

** Gedanken
Haben Sie noch Tipps für "schlaues Arbeiten" an der Masterarbeit?
kleine Ziele setzen und erreichen motiviert
** Notizen
wird in nächster Zeit auch einiges an Overhead geben
erstmal ist Ziel zu lernen, wie es geht (Programmieren, etc)
dann gehts auch weiter in Richtung Künstlicher Intelligenz

* Notizen zur Arbeit
** Simulationsstudie
Single Leg Beispiel

* Python-Homepages
Hier ein paar gute Links zu Python.

** Tutorials
[[https://www.python-kurs.eu/python3_kurs.php][Python Kurs - Python 3 Tutorial]]
[[https://docs.scipy.org/doc/numpy/user/quickstart.html][Quickstart tutorial von SciPy.org]]
[[https://www.geeksforgeeks.org/python-programming-language/][Übersicht von GeeksForGeeks - geht sehr ins Detail]]
[[https://www.ilsb.tuwien.ac.at/~pahr/317.530/01.html][Tutorial der TU Wien]]
[[https://geo-python.github.io/2017/course-info/course-info.html][Geo-Python - Vorlesungsunterlagen einer finnischen Uni (Helsinki)]]
[[https://anh.cs.luc.edu/python/hands-on/3.1/handsonHtml/index.html][Hands-on Python Tutorial von Loyola University in Chicago]]

** weitere Tipps
[[https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/][28 Jupyter Notebook tips, tricks, and shortcuts]]

* Erweiterungen
** Mehrere Customer-Segmente

** Produkte verbrauchen verschiedene Kapazitäten (Kapazitätsvektor)

** Stages von Software-Development hinzufügen (stabile Version separat handhaben, mit Tests Stabilität sicherstellen)
* Tagebuch

** Persönliche Vorbereitung<2019-03-04 Mo>
Projekt strukturiert
Paper zu Fleet-Management im automobilen E-Auto-Kontext erneut überflogen
LaTeX aufgesetzt
Github aufgesetzt
Citavi aufgesetzt

** Treffen mit Prof. Klein <2019-03-05 Di>
Ausgedehntes Mittagessen beim Griechen mit Auto von Klein hingefahren
Gespräch zur Masterarbeit mit Methoden und Modellen verstehen
Allgemeines Gespräch zu wie Uni funktioniert oder zu Klausuren
Angesprochen, dass ich als Tutor unterstützen würde
Klein schickte mir Paper zu

** Paper lesen und Orga <2019-03-06 Mi>
Talluri gelesen
Termin mit Sebastian vereinbart
Org-Dokument weiter verbessert

** Termin mit Sebastian<2019-03-07 Do>
In Miranda, Bront und Liu reingelesen
Zeitplan überarbeitet
Mit Sebastian Per-Du -erneut? :D
Vorgehen erneut angepasst
Python Tutorials gelistet
Memoisation gelernt
Spyder geupdated
eigenen Zeitplan erstellen
Tagebuch begonnen (wobei das mit Org-Mode vermutlich noch effizienter gestaltet werden kann)

** Experimentieren mit Python<2019-03-08 Fr>
Verschiedene Python IDEs ausprobieren (Spyder, Pycharm, Rodeo)
RStudio gewohnt und ziemlich gut (Autocompletion, Plots, Documentation, Refactoring)
Simulationsstudie implementiert
Python Tutorials weiter gelesen
Etwas code refactoring (nach PEP-8 Konventionen)
** Python geht weiter, aber holprig<2019-03-11 Mo>
For Schleife mit xrange oder array kopieren
Es gibt eine Python Version 3 und ein Tutorial zu Python2
Zeitlicher Vergleich von Implementierung zeigt gar nicht so viel Unterschied zwischen Random Vector und direktem Choice
Jupyter Notebook mit "python -m notebook" starten
Workflow noch holprig (in Pycharm coden und Ergebnisse in Jupyter Notebooks ausgeben; doppelter Code, Versionskontrolle)
Python Guide [[https://gist.github.com/sloria/7001839][The Best of the Best Practices (BOBP) Guide for Python]]
Produkte enthalten nicht das "Kein-Produkt" (gab laufend Probleme mit unterschiedlichen Dimensionen von Sachen)
DataFrame mit loc adressieren gibt Objekt vom Typ series zurück, welches zu Problemen führt beim Vergleich auf einen fixen Wert
** Pyhton, again what learned<2019-03-12 Di>
Funktionen haben eine Paramterliste, beim Funktionsaufruf werden Argumente übergeben
Chomsky hat Rekursion in Sprache (Grammatik) definiert
Überarbeitung der Value expected (gebe nur mit welche Kapazität und wieviel Zeit übrig, Rest bleibt immer gleich)
Code aufgeräumt (separtes Testen, kürzere Parameterliste, dafür Verwendung von globalen Variablen in Funktionen)
Memoisation hingebracht nach ewigem Rumgetue (Importieren von Funktionen verhindert anständige Memoisation, Tupel nötig als Parameter)
